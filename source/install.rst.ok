Install llvm and Cpu0 example code
============

Before start, I have one thing hope you to know. In fact, you can work with a backend program, even a new CPU, by porting from the similar existed llvm backend or from the existed llvm supported CPU which you familiar with. In that way, maybe it include redundant code. But it's OK since compiler is running on PC or Laptop which got a lots of memory. It's a style for real working in programming. It's a way to learn, I agree. The advantage of this approach came from the fact of most RISC CPUs have similar instruction set in concept and style. All you need to do is porting from an existing CPU into a similar instruction set of CPU with different OP code. According my experience, this solution has two shortage. First, this approach can make progress better in time at beginning, I agree. But the time will be offset in debug and maintenance. The backend program is a kind of system program which is a low level program and most of the functions is triggered by call back function or override function in C++. LLVM call these backend function at proper time. As you can imagine, it's not easy to track the program execution flow. It's harder to debug compare to the front end program which you can track the program flow easily because front end call llvm interface/function when it like to. And more harder and harder then the ordinary UI or high level application because backend is a system program. Second, by this approach you won't get a full knowledge in llvm backend programming. With full llvm backend knowledge equipment, you will find the backend programming is becoming easier and easier for your daily work, day by day. So, if you are a paid time llvm backend programmer, I suggest you learn llvm backend program from beginning when you got time. Of course, put the learning task on aside when you got scheduled job, and pike up the learning task back when your time is available. It's my opinion. Just do your choice.

I will show you how I install llvm in iMac and Linux in this chapter. Currently, I can build the llvm source code on iMac Xcode and do debug by lldb. I cannot do debug on IDE Xcode at this point, so if you know how to do debug LLVM on Xcode, please let me know by email. I really need that. In Linux, I can build and debug by gdb on Linux Fedora 17, and the same I don't know how to do debug on IDE like Eclips. About ``cmake`` for llvm please reference `Building LLVM with CMake`_ further. The Xcode version I use in this book is 4.5.1, cmake is 2.8.9.

.. _Building LLVM with CMake:
	http://llvm.org/docs/CMake.html? highlight=cmake

This book is still a work in progress, so sections may be incomplete, but
I hope you will enjoy it as it grows.

Install LLVM, Xcode and cmake on iMac
--------------------

Install Xcode from App Store as well as cmake from.

.. figure:: ../Fig/Fig1_2.png
	:align: center

	Fig 1.2  Adjust iMac to allow download cmake

Then, ``tar -zxvf llvm, clang, compiler-rt``, and change the llvm source code root directory into src. After that, move clang source code to src/tools/clang, move compiler-rt source to src/project/compiler-rt as Fig 1.1.

.. figure:: ../Fig/Fig1_1.png
	:align: center

	Fig 1.1 llvm, clang, compiler-rt source code position on iMac

