diff -Naur Chapter4_2/Cpu0InstrInfo.td Chapter4_4/Cpu0InstrInfo.td
--- Chapter4_2/Cpu0InstrInfo.td	2013-06-19 11:27:25.228714127 +0800
+++ Chapter4_4/Cpu0InstrInfo.td	2013-06-19 11:27:25.216714127 +0800
@@ -45,6 +45,12 @@
   let EncoderMethod = "getMemEncoding";
 }
 
+def mem_ea : Operand<i32> {
+  let PrintMethod = "printMemOperandEA";
+  let MIOperandInfo = (ops CPURegs, simm16);
+  let EncoderMethod = "getMemEncoding";
+}
+
 // Node immediate fits as 16-bit sign extended on target immediate.
 // e.g. addi, andi
 def immSExt16  : PatLeaf<(imm), [{ return isInt<16>(N->getSExtValue()); }]>;
@@ -163,6 +169,10 @@
   def #NAME# : StoreM<op, instr_asm, OpNode, CPURegs, mem, Pseudo>;
 }
 
+class EffectiveAddress<string instr_asm, RegisterClass RC, Operand Mem> :
+  FMem<0x09, (outs RC:$ra), (ins Mem:$addr),
+     instr_asm, [(set RC:$ra, addr:$addr)], IIAlu>;
+
 //===----------------------------------------------------------------------===//
 // Instruction definition
 //===----------------------------------------------------------------------===//
@@ -204,6 +214,14 @@
   def RET : FJ <0x2C, (outs), (ins CPURegs:$target),
                 "ret\t$target", [(Cpu0Ret CPURegs:$target)], IIBranch>;
 
+// FrameIndexes are legalized when they are operands from load/store
+// instructions. The same not happens for stack address copies, so an
+// add op with mem ComplexPattern is used and the stack address copy
+// can be matched. It's similar to Sparc LEA_ADDRi
+def LEA_ADDiu : EffectiveAddress<"addiu\t$ra, $addr", CPURegs, mem_ea> {
+  let isCodeGenOnly = 1;
+}
+
 //===----------------------------------------------------------------------===//
 //  Arbitrary patterns that map to one or more instructions
 //===----------------------------------------------------------------------===//
diff -Naur Chapter4_2/InstPrinter/Cpu0InstPrinter.cpp Chapter4_4/InstPrinter/Cpu0InstPrinter.cpp
--- Chapter4_2/InstPrinter/Cpu0InstPrinter.cpp	2013-06-19 11:27:25.228714127 +0800
+++ Chapter4_4/InstPrinter/Cpu0InstPrinter.cpp	2013-06-19 11:27:25.220714127 +0800
@@ -110,3 +110,13 @@
   O << ")";
 }
 
+void Cpu0InstPrinter::
+printMemOperandEA(const MCInst *MI, int opNum, raw_ostream &O) {
+  // when using stack locations for not load/store instructions
+  // print the same way as all normal 3 operand instructions.
+  printOperand(MI, opNum, O);
+  O << ", ";
+  printOperand(MI, opNum+1, O);
+  return;
+}
+
diff -Naur Chapter4_2/InstPrinter/Cpu0InstPrinter.h Chapter4_4/InstPrinter/Cpu0InstPrinter.h
--- Chapter4_2/InstPrinter/Cpu0InstPrinter.h	2013-06-19 11:27:25.228714127 +0800
+++ Chapter4_4/InstPrinter/Cpu0InstPrinter.h	2013-06-19 11:27:25.220714127 +0800
@@ -39,6 +39,7 @@
   void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
   void printUnsignedImm(const MCInst *MI, int opNum, raw_ostream &O);
   void printMemOperand(const MCInst *MI, int opNum, raw_ostream &O);
+  void printMemOperandEA(const MCInst *MI, int opNum, raw_ostream &O);
 };
 } // end namespace llvm
 
