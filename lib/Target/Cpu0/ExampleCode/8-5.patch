diff -Naur 8/4/Cpu0/Cpu0FrameLowering.cpp 8/5/Cpu0/Cpu0FrameLowering.cpp
--- 8/4/Cpu0/Cpu0FrameLowering.cpp	2013-03-24 21:41:23.000000000 +0800
+++ 8/5/Cpu0/Cpu0FrameLowering.cpp	2013-03-24 21:41:23.000000000 +0800
@@ -185,6 +185,15 @@
 
 }
 
+// This function eliminate ADJCALLSTACKDOWN,
+// ADJCALLSTACKUP pseudo instructions
+void Cpu0FrameLowering::
+eliminateCallFramePseudoInstr(MachineFunction &MF, MachineBasicBlock &MBB,
+                              MachineBasicBlock::iterator I) const {
+  // Simply discard ADJCALLSTACKDOWN, ADJCALLSTACKUP instructions.
+  MBB.erase(I);
+}
+
 // This method is called immediately before PrologEpilogInserter scans the 
 //  physical registers used to determine what callee saved registers should be 
 //  spilled. This method is optional. 
diff -Naur 8/4/Cpu0/Cpu0FrameLowering.h 8/5/Cpu0/Cpu0FrameLowering.h
--- 8/4/Cpu0/Cpu0FrameLowering.h	2013-03-24 21:41:23.000000000 +0800
+++ 8/5/Cpu0/Cpu0FrameLowering.h	2013-03-24 21:41:23.000000000 +0800
@@ -35,6 +35,9 @@
   void emitPrologue(MachineFunction &MF) const;
   void emitEpilogue(MachineFunction &MF, MachineBasicBlock &MBB) const;
   bool hasFP(const MachineFunction &MF) const;
+  void eliminateCallFramePseudoInstr(MachineFunction &MF,
+                                     MachineBasicBlock &MBB,
+                                     MachineBasicBlock::iterator I) const;
   void processFunctionBeforeCalleeSavedScan(MachineFunction &MF,
                                             RegScavenger *RS) const;
 };
diff -Naur 8/4/Cpu0/Cpu0InstrInfo.cpp 8/5/Cpu0/Cpu0InstrInfo.cpp
--- 8/4/Cpu0/Cpu0InstrInfo.cpp	2013-03-24 21:41:23.000000000 +0800
+++ 8/5/Cpu0/Cpu0InstrInfo.cpp	2013-03-24 21:41:23.000000000 +0800
@@ -21,7 +21,7 @@
 using namespace llvm;
 
 Cpu0InstrInfo::Cpu0InstrInfo(Cpu0TargetMachine &tm)
-  : 
+  : Cpu0GenInstrInfo(Cpu0::ADJCALLSTACKDOWN, Cpu0::ADJCALLSTACKUP),
     TM(tm),
     RI(*TM.getSubtargetImpl(), *this) {}
 
diff -Naur 8/4/Cpu0/Cpu0RegisterInfo.cpp 8/5/Cpu0/Cpu0RegisterInfo.cpp
--- 8/4/Cpu0/Cpu0RegisterInfo.cpp	2013-03-24 21:41:23.000000000 +0800
+++ 8/5/Cpu0/Cpu0RegisterInfo.cpp	2013-03-24 21:41:23.000000000 +0800
@@ -97,6 +97,7 @@
   MachineInstr &MI = *II;
   MachineFunction &MF = *MI.getParent()->getParent();
   MachineFrameInfo *MFI = MF.getFrameInfo();
+  Cpu0FunctionInfo *Cpu0FI = MF.getInfo<Cpu0FunctionInfo>();
 
   unsigned i = 0;
   while (!MI.getOperand(i).isFI()) {
@@ -132,7 +133,10 @@
   // Everything else is referenced relative to whatever register
   // getFrameRegister() returns.
   unsigned FrameReg;
-
+  if (Cpu0FI->isOutArgFI(FrameIndex) || Cpu0FI->isDynAllocFI(FrameIndex) ||
+      (FrameIndex >= MinCSFI && FrameIndex <= MaxCSFI))
+    FrameReg = Cpu0::SP;
+  else
     FrameReg = getFrameRegister(MF);
 
   // Calculate final offset.
@@ -143,7 +147,11 @@
   //   by adding the size of the stack:
   //   incoming argument, callee-saved register location or local variable.
   int64_t Offset;
-  Offset = spOffset + (int64_t)stackSize;
+  if (Cpu0FI->isOutArgFI(FrameIndex) || Cpu0FI->isGPFI(FrameIndex) ||
+      Cpu0FI->isDynAllocFI(FrameIndex))
+    Offset = spOffset;
+  else
+    Offset = spOffset + (int64_t)stackSize;
 
   Offset    += MI.getOperand(i+1).getImm();
 
